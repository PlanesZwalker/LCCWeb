/**
 * WordManager.js - Enhanced word detection and management module
 */

export class WordManager {
    constructor() {
        this.dictionary = new Set();
        this.wordsFound = [];
        this.targetWords = ['CHAT', 'MAISON', 'MUSIQUE', 'JARDIN', 'LIVRE', 'TABLE', 'FEN√äTRE', 'PORTE'];
        this.wordDetector = new WordDetector();
        this.wordClues = new Map();
        this.activeClues = [];
        this.wordCategories = {
            'ANIMAUX': ['CHAT', 'CHIEN', 'LION', 'TIGRE', '√âL√âPHANT', 'GIRAFE', 'Z√àBRE', 'PANTH√àRE'],
            'MAISON': ['MAISON', 'APPARTEMENT', 'CHAMBRE', 'CUISINE', 'SALON', 'BALCON', 'JARDIN'],
            'MUSIQUE': ['MUSIQUE', 'PIANO', 'GUITARE', 'VIOLON', 'TAMBOUR', 'FL√õTE', 'HARPE'],
            'NATURE': ['ARBRE', 'FLEUR', 'SOLEIL', 'LUNE', '√âTOILE', 'PLAGE', 'MONTAGNE', 'RIVI√àRE'],
            'VILLE': ['VILLE', 'RUE', '√âCOLE', 'H√îPITAL', 'RESTAURANT', 'CAF√â', 'TH√â√ÇTRE', 'CIN√âMA']
        };
    }

    async init() {
        try {
            await this.loadDictionary();
            this.generateWordClues();
            console.log('üìö WordManager initialized with enhanced features');
        } catch (error) {
            console.error('‚ùå WordManager initialization failed:', error);
            throw error;
        }
    }

    reset() {
        this.wordsFound = [];
        this.activeClues = [];
    }

    async loadDictionary() {
        // Enhanced French dictionary with categories
        const frenchWords = [
            // Animals
            'CHAT', 'CHIEN', 'LION', 'TIGRE', '√âL√âPHANT', 'GIRAFE', 'Z√àBRE', 'PANTH√àRE', 'L√âOPARD',
            'RENARD', 'LOUP', 'OURS', 'SINGE', 'GORILLE', 'CHIMPANZ√â', 'ORANG-OUTAN', 'KANGOUROU',
            'KOALA', 'PINGOUIN', 'AIGLE', 'FAUCON', 'PERROQUET', 'TOUCAN', 'FLAMANT', 'CYGNE',
            
            // House & Home
            'MAISON', 'APPARTEMENT', 'CHAMBRE', 'CUISINE', 'SALON', 'BALCON', 'JARDIN', 'GARAGE',
            'CAVE', 'GRENIER', 'BUREAU', 'SALLE', 'COULOIR', 'ESCALIER', 'ASCENSEUR', 'TOIT',
            'MUR', 'FEN√äTRE', 'PORTE', 'CHEMIN√âE', 'TERRASSE', 'PISCINE', 'CL√îTURE', 'ALL√âE',
            
            // Music
            'MUSIQUE', 'PIANO', 'GUITARE', 'VIOLON', 'TAMBOUR', 'FL√õTE', 'HARPE', 'TROMPETTE',
            'SAXOPHONE', 'CLARINETTE', 'ACCORD√âON', 'BANJO', 'MANDOLINE', 'CYMBALES', 'TAMBOURIN',
            'ORCHESTRE', 'CH≈íUR', 'M√âLODIE', 'RHYTHME', 'HARMONIE', 'CONCERT', 'OP√âRA', 'SYMPHONIE',
            
            // Nature
            'ARBRE', 'FLEUR', 'SOLEIL', 'LUNE', '√âTOILE', 'PLAGE', 'MONTAGNE', 'RIVI√àRE', 'OC√âAN',
            'FOR√äT', 'CHAMP', 'PRAIRIE', 'SAVANE', 'D√âSERT', 'GLACIER', 'VOLCAN', '√éLE', 'P√âNINSULE',
            'ISTHME', 'CAP', 'BAIE', 'GOLFE', 'D√âTROIT', 'CANAL', 'LAC', '√âTANG', 'MAR√âCAGE',
            'CASCADE', 'SOURCE', 'PUITS', 'FONTAINE', 'AQUEDUC', 'DIGUE', 'BARRAGE', '√âCLUSE',
            
            // City & Places
            'VILLE', 'RUE', '√âCOLE', 'H√îPITAL', 'RESTAURANT', 'CAF√â', 'TH√â√ÇTRE', 'CIN√âMA', 'MUS√âE',
            'BIBLIOTH√àQUE', 'PARC', 'STADE', 'PISCINE', 'GYMNASE', 'MARCH√â', 'BANQUE', 'POSTE',
            'GARE', 'A√âROPORT', 'H√îTEL', 'MAIRIE', '√âGLISE', 'TEMPLE', 'MOSQU√âE', 'SYNAGOGUE',
            'CIMETI√àRE', 'PONT', 'TUNNEL', 'ROUTE', 'AUTOROUTE', 'CHEMIN', 'SENTIER', 'PASSAGE',
            'AVENUE', 'BOULEVARD', 'PLACE', 'SQUARE', 'BOIS', 'PR√â', 'PARC', 'JARDIN',
            
            // Technology
            'ORDINATEUR', 'T√âL√âPHONE', 'RADIO', 'T√âL√âVISION', 'INTERNET', 'R√âSEAU', 'SATELLITE',
            'ANTENNE', 'C√ÇBLE', 'FIL', 'PRISE', 'INTERRUPTEUR', 'LAMPE', 'AMPOULE', 'LUMI√àRE',
            '√âLECTRICIT√â', 'GAZ', 'EAU', 'AIR', 'VENT', 'PLUIE', 'NEIGE', 'GLACE', 'VAPEUR',
            'FUM√âE', 'BRUME', 'NUAGE', 'ORAGE', 'TONNERRE', '√âCLAIR', 'ARC', 'PLUIE', 'AVERSES',
            'ORAGE', 'FOUDRE', 'GR√äLE', 'GIVRE', 'ROS√âE', 'BRUME', 'BROUILLARD', 'SMOG',
            
            // Actions & Activities
            'NETTOYER', 'LAVER', 'ESSUYER', 'BROSSER', 'BALAYER', 'ASPIRER', 'PASSER', 'REPASSER',
            'COUDRE', 'TISSER', 'TRICOTER', 'BRODER', 'PEINDRE', 'DESSINER', '√âCRIRE', 'LIRE',
            'COMPTER', 'CALCULER', 'MESURER', 'PESER', 'COMPARER', 'CLASSER', 'TRIER', 'RANGER',
            'ORGANISER', 'PLANIFIER', 'PR√âPARER', 'CONSTRUIRE', 'R√âPARER', 'MONTER', 'D√âMONTER',
            'ASSEMBLER', 'D√âSASSEMBLER', 'COUPER', 'COLLER', 'CLOUER', 'VISSER', 'PERCER', 'FORER',
            'SCULPTER', 'GRAVER', 'IMPRIMER', 'PHOTOGRAPHIER', 'FILMER', 'ENREGISTRER',
            
            // Communication
            'DIFFUSER', '√âMISSION', 'R√âCEPTION', 'TRANSMISSION', 'COMMUNICATION', 'CONVERSATION',
            'DISCUSSION', 'D√âBAT', 'ARGUMENT', 'OPINION', 'ID√âE', 'PENS√âE', 'R√âFLEXION', 'M√âDITATION',
            'R√äVERIE', 'IMAGINATION', 'CR√âATIVIT√â', 'INVENTION', 'D√âCOUVERTE', 'RECHERCHE', '√âTUDE',
            'ANALYSE', 'SYNTH√àSE', 'TH√âORIE', 'PRATIQUE', 'EXP√âRIENCE', 'EXP√âRIMENTATION', 'OBSERVATION',
            'HYPOTH√àSE', 'CONCLUSION', 'R√âSULTAT', 'EFFET', 'CAUSE', 'CONS√âQUENCE', 'INFLUENCE',
            'IMPACT', 'CHANGEMENT', '√âVOLUTION', 'PROGRESSION', 'D√âVELOPPEMENT', 'AM√âLIORATION',
            'PERFECTIONNEMENT', 'OPTIMISATION', 'MAXIMISATION', 'MINIMISATION', 'R√âDUCTION',
            'AUGMENTATION', 'MULTIPLICATION', 'DIVISION', 'ADDITION', 'SOUSTRACTION', 'CALCUL',
            
            // Mathematics & Science
            'MATH√âMATIQUE', 'G√âOM√âTRIE', 'ALG√àBRE', 'ARITHM√âTIQUE', 'STATISTIQUE', 'PROBABILIT√â',
            'LOGARITHME', 'EXPONENTIEL', 'TRIGONOM√âTRIE', 'CALCULUS', 'INT√âGRALE', 'D√âRIV√âE',
            'FONCTION', 'VARIABLE', 'CONSTANTE', 'PARAM√àTRE', 'COEFFICIENT', 'EXPOSANT', 'RACINE',
            'PUISSANCE', 'CARR√â', 'CUBE', 'QUART', 'MOITI√â', 'TIERS', 'QUART', 'CINQUI√àME',
            'SIXI√àME', 'SEPTI√àME', 'HUITI√àME', 'NEUVI√àME', 'DIXI√àME', 'CENTI√àME', 'MILLI√àME',
            'MILLION', 'MILLIARD', 'BILLION', 'TRILLION', 'Z√âRO', 'UN', 'DEUX', 'TROIS', 'QUATRE',
            'CINQ', 'SIX', 'SEPT', 'HUIT', 'NEUF', 'DIX', 'ONZE', 'DOUZE', 'TREIZE', 'QUATORZE',
            'QUINZE', 'SEIZE', 'DIX-SEPT', 'DIX-HUIT', 'DIX-NEUF', 'VINGT', 'TRENTE', 'QUARANTE',
            'CINQUANTE', 'SOIXANTE', 'SOIXANTE-DIX', 'QUATRE-VINGT', 'QUATRE-VINGT-DIX', 'CENT',
            'MILLE', 'PREMIER', 'DEUXI√àME', 'TROISI√àME', 'QUATRI√àME', 'CINQUI√àME', 'SIXI√àME',
            'SEPTI√àME', 'HUITI√àME', 'NEUVI√àME', 'DIXI√àME', 'DERNIER', 'PR√âC√âDENT', 'SUIVANT',
            'ACTUEL', 'PR√âSENT', 'PASS√â', 'FUTUR', 'ANCIEN', 'NOUVEAU', 'MODERNE', 'CONTEMPORAIN',
            
            // Art & Culture
            'TRADITIONNEL', 'CLASSIQUE', 'ANTIQUE', 'M√âDI√âVAL', 'RENAISSANCE', 'BAROQUE', 'ROCOCO',
            'N√âOCLASSIQUE', 'ROMANTIQUE', 'R√âALISTE', 'IMPRESSIONNISTE', 'EXPRESSIONNISTE', 'CUBISTE',
            'SURR√âALISTE', 'ABSTRAIT', 'CONCEPTUEL', 'MINIMALISTE', 'POSTMODERNE', 'AVANT-GARDE',
            'EXP√âRIMENTAL', 'INNOVANT', 'CR√âATIF', 'ORIGINAL', 'UNIQUE', 'PARTICULIER', 'SP√âCIAL',
            'EXCEPTIONNEL', 'EXTRAORDINAIRE', 'REMARQUABLE', 'NOTABLE', 'IMPORTANT', 'ESSENTIEL',
            'FONDAMENTAL', 'BASIQUE', '√âL√âMENTAIRE', 'PRIMAIRE', 'SECONDAIRE', 'TERTIAIRE',
            'QUATERNAIRE', 'QUINAIRE', 'S√âNAIRE', 'SEPTENAIRE', 'OCTONAIRE', 'NOVENAIRE', 'D√âCENAIRE',
            'CENTENAIRE', 'MILL√âNAIRE', 'BIMILL√âNAIRE', 'TRIMILL√âNAIRE', 'QUADRIMILL√âNAIRE',
            'QUINQUAMILL√âNAIRE', 'SEXAMILL√âNAIRE', 'SEPTAMILL√âNAIRE', 'OCTAMILL√âNAIRE', 'NOVAMILL√âNAIRE',
            'D√âCAMILL√âNAIRE', 'CENTAMILL√âNAIRE', 'BILLENAIRE', 'TRILLENAIRE', 'QUADRILLENAIRE',
            'QUINQUILLENAIRE', 'SEXILLENAIRE', 'SEPTILLENAIRE', 'OCTILLENAIRE', 'NOVILLENAIRE',
            'D√âCILLENAIRE', 'CENTILLENAIRE', 'MILLILLENAIRE', 'BILLILLENAIRE', 'TRILLILLENAIRE',
            'QUADRILLILLENAIRE', 'QUINQUILLILLENAIRE', 'SEXILLILLENAIRE', 'SEPTILLILLENAIRE',
            'OCTILLILLENAIRE', 'NOVILLILLENAIRE', 'D√âCILLILLENAIRE', 'CENTILLILLENAIRE'
        ];
        
        this.dictionary = new Set(frenchWords);
        
        // Add target words to dictionary if not already present
        this.targetWords.forEach(word => {
            this.dictionary.add(word);
        });
    }

    generateWordClues() {
        this.wordClues.clear();
        
        // Generate clues for target words
        this.targetWords.forEach(word => {
            const clue = this.generateClueForWord(word);
            this.wordClues.set(word, clue);
        });
        
        // Generate clues for category words
        Object.entries(this.wordCategories).forEach(([category, words]) => {
            words.forEach(word => {
                if (!this.wordClues.has(word)) {
                    const clue = this.generateClueForWord(word);
                    this.wordClues.set(word, clue);
                }
            });
        });
    }

    generateClueForWord(word) {
        const clues = {
            'CHAT': { hint: 'Animal domestique qui miaule', category: 'ANIMAUX', difficulty: 1 },
            'MAISON': { hint: 'Endroit o√π on habite', category: 'MAISON', difficulty: 1 },
            'MUSIQUE': { hint: 'Art des sons et m√©lodies', category: 'MUSIQUE', difficulty: 2 },
            'JARDIN': { hint: 'Espace vert avec des plantes', category: 'NATURE', difficulty: 1 },
            'LIVRE': { hint: 'Objet pour lire des histoires', category: 'CULTURE', difficulty: 1 },
            'TABLE': { hint: 'Meuble pour manger ou travailler', category: 'MAISON', difficulty: 1 },
            'FEN√äTRE': { hint: 'Ouverture dans le mur pour voir dehors', category: 'MAISON', difficulty: 2 },
            'PORTE': { hint: 'Entr√©e et sortie d\'une pi√®ce', category: 'MAISON', difficulty: 1 },
            'CHIEN': { hint: 'Meilleur ami de l\'homme', category: 'ANIMAUX', difficulty: 1 },
            'PIANO': { hint: 'Instrument √† touches noires et blanches', category: 'MUSIQUE', difficulty: 2 },
            'ARBRE': { hint: 'Plante avec un tronc et des feuilles', category: 'NATURE', difficulty: 1 },
            'SOLEIL': { hint: '√âtoile qui √©claire la Terre', category: 'NATURE', difficulty: 1 },
            'VILLE': { hint: 'Grande agglom√©ration urbaine', category: 'LIEUX', difficulty: 1 },
            '√âCOLE': { hint: 'Lieu d\'apprentissage', category: 'LIEUX', difficulty: 1 },
            'RESTAURANT': { hint: 'Endroit pour manger dehors', category: 'LIEUX', difficulty: 2 }
        };
        
        return clues[word] || { 
            hint: `Mot de ${word.length} lettres`, 
            category: 'G√âN√âRAL', 
            difficulty: Math.min(Math.floor(word.length / 3) + 1, 3) 
        };
    }

    // Added for tests: return a copy of the dictionary as an array
    getWordList() {
        return Array.from(this.dictionary);
    }

    // Added for tests: process an array and keep only valid dictionary words (uppercase)
    processWordList(words) {
        if (!Array.isArray(words)) return [];
        return words
            .map(w => (typeof w === 'string' ? w.toUpperCase() : ''))
            .filter(w => w && this.dictionary.has(w));
    }

    getActiveClues() {
        return this.activeClues;
    }

    addActiveClue(word) {
        const clue = this.wordClues.get(word);
        if (clue && !this.activeClues.find(c => c.word === word)) {
            this.activeClues.push({
                word: word,
                hint: clue.hint,
                category: clue.category,
                difficulty: clue.difficulty,
                timeAdded: Date.now()
            });
        }
    }

    removeActiveClue(word) {
        this.activeClues = this.activeClues.filter(clue => clue.word !== word);
    }

    update() {
        // Update active clues (remove old ones)
        const now = Date.now();
        this.activeClues = this.activeClues.filter(clue => 
            now - clue.timeAdded < 30000 // Remove clues older than 30 seconds
        );
    }

    render(ctx) {
        // Render active word clues
        this.renderActiveClues(ctx);
        
        // Render word completion indicators
        this.renderWordIndicators(ctx);
    }

    renderActiveClues(ctx) {
        if (this.activeClues.length === 0) return;
        
        const startY = 50;
        const lineHeight = 25;
        
        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
        ctx.fillRect(10, startY - 10, 300, this.activeClues.length * lineHeight + 20);
        
        ctx.fillStyle = 'white';
        ctx.font = '14px Arial';
        ctx.textAlign = 'left';
        
        this.activeClues.forEach((clue, index) => {
            const y = startY + index * lineHeight;
            
            // Word
            ctx.fillStyle = '#FFD700';
            ctx.fillText(`${clue.word}:`, 20, y);
            
            // Hint
            ctx.fillStyle = 'white';
            ctx.fillText(clue.hint, 20 + ctx.measureText(`${clue.word}: `).width, y);
        });
    }

    renderWordIndicators(ctx) {
        // Render progress indicators for target words
        const startX = ctx.canvas.width - 200;
        const startY = 50;
        const lineHeight = 20;
        
        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
        ctx.fillRect(startX - 10, startY - 10, 210, this.targetWords.length * lineHeight + 20);
        
        ctx.font = '12px Arial';
        ctx.textAlign = 'left';
        
        this.targetWords.forEach((word, index) => {
            const y = startY + index * lineHeight;
            const isCompleted = this.wordsFound.includes(word);
            
            ctx.fillStyle = isCompleted ? '#00FF00' : '#FF6B6B';
            ctx.fillText(`${isCompleted ? '‚úì' : '‚óã'} ${word}`, startX, y);
        });
    }

    checkWordCompletion(grid) {
        const words = this.wordDetector.scanGrid(grid);
        const validWords = words.filter(word => this.dictionary.has(word));
        
        // Add new words to active clues
        validWords.forEach(word => {
            if (!this.wordsFound.includes(word)) {
                this.addActiveClue(word);
            }
        });
        
        return validWords;
    }

    completeWord(word) {
        if (!this.wordsFound.includes(word)) {
            this.wordsFound.push(word);
            this.removeActiveClue(word);
            return true;
        }
        return false;
    }

    getWordProgress() {
        const completed = this.wordsFound.length;
        const total = this.targetWords.length;
        return { completed, total, percentage: (completed / total) * 100 };
    }

    getRandomWordFromCategory(category) {
        const words = this.wordCategories[category] || [];
        return words[Math.floor(Math.random() * words.length)];
    }

    getWordDifficulty(word) {
        const clue = this.wordClues.get(word);
        return clue ? clue.difficulty : 1;
    }
}

class WordDetector {
    constructor() {
        this.dictionary = new Set();
    }

    scanGrid(grid) {
        const words = [];
        
        // Check horizontal words
        for (let row = 0; row < grid.length; row++) {
            for (let col = 0; col < grid[row].length; col++) {
                const word = this.findWordsInRow(grid[row].slice(col));
                words.push(...word);
            }
        }
        
        // Check vertical words
        for (let col = 0; col < grid[0].length; col++) {
            for (let row = 0; row < grid.length; row++) {
                const column = grid.map(r => r[col]).slice(row);
                const word = this.findWordsInRow(column);
                words.push(...word);
            }
        }
        
        // Check diagonal words (top-left to bottom-right)
        for (let row = 0; row < grid.length; row++) {
            for (let col = 0; col < grid[row].length; col++) {
                const diagonal = this.getDiagonal(grid, row, col, 1, 1);
                const word = this.findWordsInRow(diagonal);
                words.push(...word);
            }
        }
        
        // Check diagonal words (top-right to bottom-left)
        for (let row = 0; row < grid.length; row++) {
            for (let col = 0; col < grid[row].length; col++) {
                const diagonal = this.getDiagonal(grid, row, col, 1, -1);
                const word = this.findWordsInRow(diagonal);
                words.push(...word);
            }
        }
        
        return words;
    }

    getDiagonal(grid, startRow, startCol, deltaRow, deltaCol) {
        const diagonal = [];
        let row = startRow;
        let col = startCol;
        
        while (row >= 0 && row < grid.length && col >= 0 && col < grid[row].length) {
            diagonal.push(grid[row][col]);
            row += deltaRow;
            col += deltaCol;
        }
        
        return diagonal;
    }

    findWordsInRow(letters) {
        const words = [];
        const letterString = letters.map(cell => cell ? cell.letter : '').join('');
        
        for (let i = 0; i < letterString.length; i++) {
            for (let j = i + 2; j <= letterString.length; j++) {
                const word = letterString.substring(i, j);
                if (this.validateWord(word)) {
                    words.push(word);
                }
            }
        }
        
        return words;
    }

    validateWord(word) {
        return word.length >= 3 && this.dictionary.has(word);
    }
}
